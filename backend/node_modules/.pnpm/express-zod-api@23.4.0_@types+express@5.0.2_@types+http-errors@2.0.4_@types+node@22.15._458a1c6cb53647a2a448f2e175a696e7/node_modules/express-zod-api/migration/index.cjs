"use strict";var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var l=Object.prototype.hasOwnProperty;var g=(n,e)=>{for(var r in e)c(n,r,{get:e[r],enumerable:!0})},S=(n,e,r,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of p(e))!l.call(n,o)&&o!==r&&c(n,o,{get:()=>e[o],enumerable:!(s=u(e,o))||s.enumerable});return n};var f=n=>S(c({},"__esModule",{value:!0}),n);var v={};g(v,{default:()=>E});module.exports=f(v);var t=require("@typescript-eslint/utils"),y={headerSecurity:`${t.AST_NODE_TYPES.Identifier}[name='CustomHeaderSecurity']`,createConfig:`${t.AST_NODE_TYPES.CallExpression}[callee.name='createConfig'] > ${t.AST_NODE_TYPES.ObjectExpression}`,testMiddleware:`${t.AST_NODE_TYPES.CallExpression}[callee.name='testMiddleware'] > ${t.AST_NODE_TYPES.ObjectExpression}`},T=n=>Object.keys(n).reduce((e,r)=>Object.assign(e,{[y[r]]:n[r]}),{}),m=t.ESLintUtils.RuleCreator.withoutDocs({meta:{type:"problem",fixable:"code",schema:[],messages:{change:"change {{ subject }} from {{ from }} to {{ to }}",add:"add {{ subject }} to {{ to }}",move:"move {{ subject }} to {{ to }}"}},defaultOptions:[],create:n=>T({headerSecurity:e=>n.report({node:e,messageId:"change",data:{subject:"interface",from:e.name,to:"HeaderSecurity"},fix:r=>r.replaceText(e,"HeaderSecurity")}),createConfig:e=>{e.properties.find(s=>s.type===t.AST_NODE_TYPES.Property&&s.key.type===t.AST_NODE_TYPES.Identifier&&s.key.name==="wrongMethodBehavior")||n.report({node:e,messageId:"add",data:{subject:"wrongMethodBehavior property",to:"configuration"},fix:s=>s.insertTextAfterRange([e.range[0],e.range[0]+1],"wrongMethodBehavior: 404,")})},testMiddleware:e=>{let r=e.properties.find(i=>i.type===t.AST_NODE_TYPES.Property&&i.key.type===t.AST_NODE_TYPES.Identifier&&i.key.name==="errorHandler"&&[t.AST_NODE_TYPES.ArrowFunctionExpression,t.AST_NODE_TYPES.FunctionExpression].includes(i.value.type));if(!r)return;let s=n.sourceCode.getTokenAfter(r)?.value===",",{body:o}=r.value,a=e.properties.find(i=>i.type===t.AST_NODE_TYPES.Property&&i.key.type===t.AST_NODE_TYPES.Identifier&&i.key.name==="configProps"&&i.value.type===t.AST_NODE_TYPES.ObjectExpression),d=`errorHandler: new ResultHandler({ positive: [], negative: [], handler: ({ error, response }) => {${n.sourceCode.getText(o)}} }),`;n.report({node:r,messageId:"move",data:{subject:"errorHandler",to:"configProps"},fix:i=>[i.removeRange([r.range[0],r.range[1]+(s?1:0)]),a?i.insertTextAfterRange([a.value.range[0],a.value.range[0]+1],d):i.insertTextAfterRange([e.range[0],e.range[0]+1],`configProps: {${d}},`)]})}})}),E={rules:{v23:m}};
