import{ESLintUtils as d,AST_NODE_TYPES as r}from"@typescript-eslint/utils";var u={headerSecurity:`${r.Identifier}[name='CustomHeaderSecurity']`,createConfig:`${r.CallExpression}[callee.name='createConfig'] > ${r.ObjectExpression}`,testMiddleware:`${r.CallExpression}[callee.name='testMiddleware'] > ${r.ObjectExpression}`},p=i=>Object.keys(i).reduce((e,n)=>Object.assign(e,{[u[n]]:i[n]}),{}),l=d.RuleCreator.withoutDocs({meta:{type:"problem",fixable:"code",schema:[],messages:{change:"change {{ subject }} from {{ from }} to {{ to }}",add:"add {{ subject }} to {{ to }}",move:"move {{ subject }} to {{ to }}"}},defaultOptions:[],create:i=>p({headerSecurity:e=>i.report({node:e,messageId:"change",data:{subject:"interface",from:e.name,to:"HeaderSecurity"},fix:n=>n.replaceText(e,"HeaderSecurity")}),createConfig:e=>{e.properties.find(s=>s.type===r.Property&&s.key.type===r.Identifier&&s.key.name==="wrongMethodBehavior")||i.report({node:e,messageId:"add",data:{subject:"wrongMethodBehavior property",to:"configuration"},fix:s=>s.insertTextAfterRange([e.range[0],e.range[0]+1],"wrongMethodBehavior: 404,")})},testMiddleware:e=>{let n=e.properties.find(t=>t.type===r.Property&&t.key.type===r.Identifier&&t.key.name==="errorHandler"&&[r.ArrowFunctionExpression,r.FunctionExpression].includes(t.value.type));if(!n)return;let s=i.sourceCode.getTokenAfter(n)?.value===",",{body:c}=n.value,o=e.properties.find(t=>t.type===r.Property&&t.key.type===r.Identifier&&t.key.name==="configProps"&&t.value.type===r.ObjectExpression),a=`errorHandler: new ResultHandler({ positive: [], negative: [], handler: ({ error, response }) => {${i.sourceCode.getText(c)}} }),`;i.report({node:n,messageId:"move",data:{subject:"errorHandler",to:"configProps"},fix:t=>[t.removeRange([n.range[0],n.range[1]+(s?1:0)]),o?t.insertTextAfterRange([o.value.range[0],o.value.range[0]+1],a):t.insertTextAfterRange([e.range[0],e.range[0]+1],`configProps: {${a}},`)]})}})}),S={rules:{v23:l}};export{S as default};
