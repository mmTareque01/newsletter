// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/generated/prisma"
}

enum SubscriberStatus {
  ACTIVE
  INACTIVE
  UNSUBSCRIBED
  BLOCKED
}

enum NewsletterTypeStatus {
  ACTIVE
  INACTIVE
}

enum DeliveryStatus {
  SENT
  FAILED
  PENDING
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid()) @db.Uuid
  email     String  @unique
  firstName String?
  lastName  String?
  password  String?
  phone     String?
  bio       String?
  image     String?

  social    Json? // Store social media links as JSON
  meta      Json? // Flexible metadata field
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete field

  // 1:1 relation with SocialMedia
  address Address?

  // 1:M relation with Subscriber
  subscriber      Subscriber[]
  newsletterType  NewsletterType[]
  invitationEmail InvitationEmail[]
  emailSettings   EmailSettings?
}

model EmailSettings {
  id               String   @id @default(uuid()) @db.Uuid
  smtpHost        String
  smtpPort        Int
  smtpUser        String
  smtpPassword    String
  fromEmail       String
  fromName        String?
  useTLS          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid // Critical for 1:1
}

model Address {
  id        String    @id @default(uuid()) @db.Uuid
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete field

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid // Critical for 1:1
}

model InvitationEmail {
  id      String         @id @default(uuid()) @db.Uuid
  to      String
  subject String
  body    String
  status  DeliveryStatus // e.g., "sent", "failed", "pending"
  error   String? // Store error message if sending failed
  isSeen Boolean  @default(false) // Track if the email has been seen
  newsletterType NewsletterType? @relation(fields: [newsletterTypeId], references: [id], onDelete: Cascade)
  newsletterTypeId String? @db.Uuid // Critical for 1:1

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model Subscriber {
  id        String           @id @default(uuid()) @db.Uuid
  email     String           @unique
  name      String?
  phone     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime? // Soft delete field
  status    SubscriberStatus @default(ACTIVE) // "active", "inactive", "unsubscribed"

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid // Critical for 1:1

  newsletterType   NewsletterType? @relation(fields: [newsletterTypeId], references: [id], onDelete: Cascade)
  newsletterTypeId String?         @db.Uuid // Critical for 1:1
}

model NewsletterType {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?
  key         String  @unique

  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  deletedAt DateTime? // Soft delete field
  status    NewsletterTypeStatus @default(ACTIVE) // "active", "inactive"

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid // Critical for 1:1

  subscribers Subscriber[]
  invitationEmails InvitationEmail[]
}
